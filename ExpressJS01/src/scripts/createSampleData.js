const mongoose = require('mongoose');
const Product = require('../models/product');
const Comment = require('../models/comment');
const Purchase = require('../models/purchase');
const User = require('../models/user');
const Category = require('../models/category');
const bcrypt = require('bcrypt');

// K·∫øt n·ªëi database
const connectDB = async () => {
    try {
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/expressjs01');
        console.log('MongoDB connected');
    } catch (error) {
        console.error('MongoDB connection error:', error);
        process.exit(1);
    }
};

// T·∫°o d·ªØ li·ªáu m·∫´u
const createSampleData = async () => {
    try {
        console.log('B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u...');

        // 1. T·∫°o category m·∫´u
        let category = await Category.findOne({ name: 'ƒêi·ªán tho·∫°i' });
        if (!category) {
            category = await Category.create({
                name: 'ƒêi·ªán tho·∫°i',
                description: 'ƒêi·ªán tho·∫°i di ƒë·ªông v√† ph·ª• ki·ªán'
            });
            console.log('‚úÖ T·∫°o category: ƒêi·ªán tho·∫°i');
        }

        // 2. T·∫°o user m·∫´u
        let testUser = await User.findOne({ email: 'test@example.com' });
        if (!testUser) {
            const hashedPassword = await bcrypt.hash('password123', 10);
            testUser = await User.create({
                name: 'Ng∆∞·ªùi d√πng Test',
                email: 'test@example.com',
                password: hashedPassword,
                role: 'User',
                favoriteProducts: [],
                viewedProducts: []
            });
            console.log('‚úÖ T·∫°o user: test@example.com');
        }

        // 3. T·∫°o s·∫£n ph·∫©m m·∫´u
        let product = await Product.findOne({ name: 'iPhone 15 Pro Max' });
        if (!product) {
            product = await Product.create({
                name: 'iPhone 15 Pro Max',
                description: 'iPhone 15 Pro Max v·ªõi chip A17 Pro m·∫°nh m·∫Ω, camera 48MP v√† m√†n h√¨nh Super Retina XDR 6.7 inch',
                price: 29990000,
                originalPrice: 32990000,
                images: [
                    'https://images.unsplash.com/photo-1592750475338-74b7b21085ab?w=500',
                    'https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?w=500'
                ],
                category: category._id,
                stock: 50,
                isActive: true,
                tags: ['iPhone', 'Apple', 'Smartphone', 'Premium'],
                rating: 0,
                reviewCount: 0,
                viewCount: 0,
                purchaseCount: 0,
                commentCount: 0,
                favoriteCount: 0,
                isFeatured: true,
                isOnSale: true
            });
            console.log('‚úÖ T·∫°o s·∫£n ph·∫©m: iPhone 15 Pro Max');
        }

        // 4. T·∫°o comments m·∫´u
        const sampleComments = [
            {
                content: 'S·∫£n ph·∫©m r·∫•t t·ªët, camera ch·ª•p ·∫£nh r·∫•t ƒë·∫πp. Pin tr√¢u, d√πng c·∫£ ng√†y kh√¥ng h·∫øt pin. R·∫•t h√†i l√≤ng v·ªõi s·∫£n ph·∫©m n√†y!',
                rating: 5
            },
            {
                content: 'iPhone 15 Pro Max c√≥ thi·∫øt k·∫ø ƒë·∫πp, m√†n h√¨nh s·∫Øc n√©t. Tuy nhi√™n gi√° h∆°i cao so v·ªõi t√∫i ti·ªÅn. Nh√¨n chung l√† s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng.',
                rating: 4
            },
            {
                content: 'Mua v·ªÅ d√πng ƒë∆∞·ª£c 1 tu·∫ßn, m√°y ch·∫°y m∆∞·ª£t m√†, kh√¥ng b·ªã lag. Camera ch·ª•p ·∫£nh ban ƒë√™m r·∫•t t·ªët. ƒê√°ng ti·ªÅn b·∫°c.',
                rating: 5
            },
            {
                content: 'Thi·∫øt k·∫ø ƒë·∫πp nh∆∞ng pin h∆°i nhanh h·∫øt. C·∫ßn s·∫°c 2 l·∫ßn/ng√†y n·∫øu d√πng nhi·ªÅu. Camera th√¨ kh√¥ng c√≥ g√¨ ph√†n n√†n.',
                rating: 3
            },
            {
                content: 'S·∫£n ph·∫©m cao c·∫•p, ƒë√°ng gi√° ti·ªÅn. M√†n h√¨nh 6.7 inch r·∫•t r·ªông, ph√π h·ª£p ƒë·ªÉ xem phim v√† ch∆°i game. Khuy·∫øn ngh·ªã mua!',
                rating: 5
            }
        ];

        for (let i = 0; i < sampleComments.length; i++) {
            const commentData = sampleComments[i];
            const existingComment = await Comment.findOne({
                product: product._id,
                user: testUser._id,
                content: commentData.content
            });

            if (!existingComment) {
                await Comment.create({
                    product: product._id,
                    user: testUser._id,
                    content: commentData.content,
                    rating: commentData.rating,
                    isApproved: true,
                    likes: [],
                    likeCount: 0
                });
                console.log(`‚úÖ T·∫°o comment ${i + 1}: ${commentData.content.substring(0, 30)}...`);
            }
        }

        // 5. T·∫°o purchases m·∫´u
        const samplePurchases = [
            { quantity: 1, status: 'completed' },
            { quantity: 2, status: 'completed' },
            { quantity: 1, status: 'completed' },
            { quantity: 1, status: 'pending' }
        ];

        for (let i = 0; i < samplePurchases.length; i++) {
            const purchaseData = samplePurchases[i];
            const existingPurchase = await Purchase.findOne({
                product: product._id,
                user: testUser._id,
                quantity: purchaseData.quantity
            });

            if (!existingPurchase) {
                await Purchase.create({
                    user: testUser._id,
                    product: product._id,
                    quantity: purchaseData.quantity,
                    price: product.price,
                    totalAmount: product.price * purchaseData.quantity,
                    status: purchaseData.status,
                    paymentMethod: 'bank_transfer',
                    shippingAddress: {
                        fullName: 'Ng∆∞·ªùi d√πng Test',
                        phone: '0123456789',
                        address: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1',
                        city: 'TP.HCM',
                        district: 'Qu·∫≠n 1',
                        ward: 'Ph∆∞·ªùng B·∫øn Ngh√©'
                    },
                    notes: 'Giao h√†ng nhanh'
                });
                console.log(`‚úÖ T·∫°o purchase ${i + 1}: ${purchaseData.quantity} s·∫£n ph·∫©m - ${purchaseData.status}`);
            }
        }

        // 6. Th√™m s·∫£n ph·∫©m v√†o favorite c·ªßa user
        if (!testUser.favoriteProducts.includes(product._id)) {
            testUser.favoriteProducts.push(product._id);
            await testUser.save();
            console.log('‚úÖ Th√™m s·∫£n ph·∫©m v√†o favorite');
        }

        // 7. Th√™m s·∫£n ph·∫©m v√†o viewed products
        const existingView = testUser.viewedProducts.find(
            view => view.product.toString() === product._id.toString()
        );
        if (!existingView) {
            testUser.viewedProducts.push({
                product: product._id,
                viewedAt: new Date()
            });
            await testUser.save();
            console.log('‚úÖ Th√™m s·∫£n ph·∫©m v√†o viewed products');
        }

        // 8. C·∫≠p nh·∫≠t th·ªëng k√™ s·∫£n ph·∫©m
        const commentCount = await Comment.countDocuments({ 
            product: product._id, 
            isApproved: true 
        });
        
        const comments = await Comment.find({ 
            product: product._id, 
            isApproved: true 
        });
        
        let averageRating = 0;
        if (comments.length > 0) {
            const totalRating = comments.reduce((sum, comment) => sum + comment.rating, 0);
            averageRating = totalRating / comments.length;
        }

        const purchaseStats = await Purchase.aggregate([
            { $match: { product: product._id, status: 'completed' } },
            { $group: { _id: null, totalQuantity: { $sum: '$quantity' } } }
        ]);
        const purchaseCount = purchaseStats[0]?.totalQuantity || 0;

        const favoriteCount = await User.countDocuments({
            favoriteProducts: product._id
        });

        await Product.findByIdAndUpdate(product._id, {
            commentCount,
            reviewCount: commentCount,
            rating: averageRating,
            purchaseCount,
            favoriteCount,
            viewCount: 150 // Gi·∫£ l·∫≠p l∆∞·ª£t xem
        });

        console.log('\nüéâ Ho√†n th√†nh t·∫°o d·ªØ li·ªáu m·∫´u!');
        console.log(`üìä Th·ªëng k√™ s·∫£n ph·∫©m ${product.name}:`);
        console.log(`   - B√¨nh lu·∫≠n: ${commentCount}`);
        console.log(`   - Rating: ${averageRating.toFixed(2)}`);
        console.log(`   - ƒê√£ mua: ${purchaseCount}`);
        console.log(`   - Y√™u th√≠ch: ${favoriteCount}`);
        console.log(`   - L∆∞·ª£t xem: 150`);

    } catch (error) {
        console.error('L·ªói khi t·∫°o d·ªØ li·ªáu m·∫´u:', error);
    }
};

// Ch·∫°y script
const runScript = async () => {
    await connectDB();
    await createSampleData();
    await mongoose.disconnect();
    console.log('Script ho√†n th√†nh');
    process.exit(0);
};

runScript().catch(error => {
    console.error('Script error:', error);
    process.exit(1);
});
